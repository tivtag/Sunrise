
	//// Find the largest square power of two texture that fits into the viewport
	//m_i32TexSize = 1;
	//int iSize = PVRT_MIN(PVRShellGet(prefWidth), PVRShellGet(prefHeight));
	//while (m_i32TexSize * 2 < iSize) m_i32TexSize *= 2;

	//srand(PVRShellGetTime());
	//m_ui32Framenum = rand() % 5000;

	//// Get the initial time
	//m_ui32Time = PVRShellGetTime();

	///*
	//	Initialize VBO data and load textures
	//*/
	//LoadVbos();
	//LoadTextures();

	///*
	//	Load and compile the shaders & link programs
	//*/
	//CPVRTString ErrorStr;
	//if (!LoadShaders(&ErrorStr))
	//{
	//	PVRShellSet(prefExitMessage, ErrorStr.c_str());
	//	return false;
	//}

	//// Set the sampler2D uniforms to corresponding texture units
	//glUniform1i(glGetUniformLocation(m_ShaderProgram.uiId, "sTexture"), 0);

	///*
	//	Initialize Print3D
	//*/

	//// Is the screen rotated?
	//bool bRotate = PVRShellGet(prefIsRotated) && PVRShellGet(prefFullScreen);

	//if(m_Print3D.SetTextures(0,PVRShellGet(prefWidth),PVRShellGet(prefHeight), bRotate) != PVR_SUCCESS)
	//{
	//	PVRShellSet(prefExitMessage, "ERROR: Cannot initialise Print3D\n");
	//	return false;
	//}

	//glClearColor(0.0f, 0.0f, 0.0f, 0.0f);

	///*
	//	Create two handles for a frame buffer object.
	//*/
	//glGenFramebuffers(2, m_auiFbo);
	//m_i32CurrentFbo = 1;

	///*
	//	Get the currently bound frame buffer object. On most platforms this just gives 0.
	// */
	//glGetIntegerv(GL_FRAMEBUFFER_BINDING, &m_i32OriginalFbo);

	///*
	//	Attach the renderable objects (e.g. textures) to the frame buffer object now as
	//	they will stay attached to the frame buffer object even when it is not bound.
	//*/

	//// We have two FBOs so we're doing the same for each
	//for(int i = 0; i < 2; ++i)
	//{
	//	/*
	//		Firstly, to do anything with a frame buffer object we need to bind it. In the case
	//		below we are binding our frame buffer object to the frame buffer.
	//	*/
	//	glBindFramebuffer(GL_FRAMEBUFFER, m_auiFbo[i]);

	//	/*
	//		To render to a texture we need to attach it texture to the frame buffer object.
	//		GL_COLOR_ATTACHMENT0 tells it to attach the texture to the colour buffer, the 0 on the
	//		end refers to the colour buffer we want to attach it to as a frame buffer object can
	//		have more than one colour buffer.
	//	*/
	//	glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, m_auiTexture[i], 0);

	//	// Clear the color buffer for this FBO
	//	glClear(GL_COLOR_BUFFER_BIT);

	//	/*
	//		Create and bind a depth buffer to the frame buffer object.

	//		A depth buffer isn't needed for this training course but will likely be
	//		required for most uses of frame buffer objects so its attachment is being
	//		demonstrated here.
	//	*/

	//	// Generate and bind the handle for the render buffer (which will become our depth buffer)
	//	glGenRenderbuffers(1, &m_auiDepthBuffer[i]);
	//	glBindRenderbuffer(GL_RENDERBUFFER, m_auiDepthBuffer[i]);

	//	/*
	//		Currently it is unknown to GL that we want our new render buffer to be a depth buffer.
	//		glRenderbufferStorage will fix this and in this case will allocate a depth buffer of
	//		m_i32TexSize by m_i32TexSize.
	//	*/
	//	glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH_COMPONENT16, m_i32TexSize, m_i32TexSize);

	//	// Now we have our depth buffer attach it to our frame buffer object.
	//	glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, m_auiDepthBuffer[i]);

 //       // Check that our FBO creation was successful
 //       GLuint uStatus = glCheckFramebufferStatus(GL_FRAMEBUFFER);

 //       if(uStatus != GL_FRAMEBUFFER_COMPLETE)
 //       {
 //           PVRShellSet(prefExitMessage, "ERROR: Failed to initialise FBO");
 //           return false;
 //       }
	//}

	///*
	//	Unbind the frame buffer object so rendering returns back to the backbuffer.
	//*/
	//glBindFramebuffer(GL_FRAMEBUFFER, m_i32OriginalFbo);



		GLfloat afVertices[] = {
		-1.0f,-1.0f,-1.0f, // triangle 1 : begin
		-1.0f,-1.0f, 1.0f,
		-1.0f, 1.0f, 1.0f, // triangle 1 : end
		1.0f, 1.0f,-1.0f, // triangle 2 : begin
		-1.0f,-1.0f,-1.0f,
		-1.0f, 1.0f,-1.0f, // triangle 2 : end
		1.0f,-1.0f, 1.0f,
		-1.0f,-1.0f,-1.0f,
		1.0f,-1.0f,-1.0f,
		1.0f, 1.0f,-1.0f,
		1.0f,-1.0f,-1.0f,
		-1.0f,-1.0f,-1.0f,
		-1.0f,-1.0f,-1.0f,
		-1.0f, 1.0f, 1.0f,
		-1.0f, 1.0f,-1.0f,
		1.0f,-1.0f, 1.0f,
		-1.0f,-1.0f, 1.0f,
		-1.0f,-1.0f,-1.0f,
		-1.0f, 1.0f, 1.0f,
		-1.0f,-1.0f, 1.0f,
		1.0f,-1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,
		1.0f,-1.0f,-1.0f,
		1.0f, 1.0f,-1.0f,
		1.0f,-1.0f,-1.0f,
		1.0f, 1.0f, 1.0f,
		1.0f,-1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,
		1.0f, 1.0f,-1.0f,
		-1.0f, 1.0f,-1.0f,
		1.0f, 1.0f, 1.0f,
		-1.0f, 1.0f,-1.0f,
		-1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,
		-1.0f, 1.0f, 1.0f,
		1.0f,-1.0f, 1.0f 
	};  
	

	

		///*
		//Enable the custom vertex attribute at index VERTEX_ARRAY.
		//We previously binded that index to the variable in our shader "vec4 MyVertex;"
		//*/
		//// Sets the vertex data to this attribute index
		//glEnableVertexAttribArray(VERTEX_ARRAY);
		//glBindBuffer(GL_ARRAY_BUFFER, ui32Vbo);

		//// set the colour vertex attribute with our triangle's colours  
		//glEnableVertexAttribArray(ATTRIB_COLOUR);
		//glBindBuffer(GL_ARRAY_BUFFER, colorBuffer);
		//	
		//glEnableVertexAttribArray(ATTRIB_UV);
		//glBindBuffer(ATTRIB_UV, uvBuffer);

		///*
		//Draws a non-indexed triangle array from the pointers previously given.
		//This function allows the use of other primitive types : triangle strips, lines, ...
		//For indexed geometry, use the function glDrawElements() with an index list.
		//*/
		//glDrawArrays(GL_TRIANGLES, 0, 6*2*3);

		//glDisableVertexAttribArray(VERTEX_ARRAY);
		//glDisableVertexAttribArray(ATTRIB_COLOUR);

///******************************************************************************
//
// @File         OGLES2HelloTriangle_Windows.cpp
//
// @Title        OpenGL ES 2.0 Hello Triangle Tutorial
//
// @Version      
//
// @Copyright    Copyright (c) Imagination Technologies Limited.
//
// @Platform     .
//
// @Description  Basic Tutorial that shows step-by-step how to initialize OpenGL ES
//               2.0, use it for drawing a triangle and terminate it.
//
//******************************************************************************/
//#include <stdio.h>
//#include <windows.h>
//#include <TCHAR.h>
//
//#include <EGL/egl.h>
//#include <GLES2/gl2.h>
//
///******************************************************************************
// Defines
//******************************************************************************/
////#define NO_GDI 1 /* Remove the GDI functions */
//
//#ifndef NO_GDI
//
//// Windows class name to register
//#define	WINDOW_CLASS _T("PVRShellClass")
//
//// Width and height of the window
//#define WINDOW_WIDTH	640
//#define WINDOW_HEIGHT	480
//
//#endif
//
//// Index to bind the attributes to vertex shaders
//#define VERTEX_ARRAY	0
//
///******************************************************************************
// Global variables
//******************************************************************************/
//
//// Variable set in the message handler to finish the demo
//bool	g_bDemoDone = false;
//
///*!****************************************************************************
// @Function		WndProc
// @Input			hWnd		Handle to the window
// @Input			message		Specifies the message
// @Input			wParam		Additional message information
// @Input			lParam		Additional message information
// @Return		LRESULT		result code to OS
// @Description	Processes messages for the main window
//******************************************************************************/
//#ifndef NO_GDI
//LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
//{
//	switch (message)
//	{
//		/*
//			Here we are handling 2 system messages: screen saving and monitor power.
//			They are especially relevent on mobile devices.
//		*/
//#ifndef UNDER_CE
//		case WM_SYSCOMMAND:
//		{
//			switch (wParam)
//			{
//				case SC_SCREENSAVE:					// Screensaver trying to start ?
//				case SC_MONITORPOWER:				// Monitor trying to enter powersave ?
//				return 0;							// Prevent this from happening
//			}
//			break;
//		}
//#endif
//		// Handles the close message when a user clicks the quit icon of the window
//		case WM_CLOSE:
//			g_bDemoDone = true;
//			PostQuitMessage(0);
//			return 1;
//
//		default:
//			break;
//	}
//
//	// Calls the default window procedure for messages we did not handle
//	return DefWindowProc(hWnd, message, wParam, lParam);
//}
//#endif
///*!****************************************************************************
// @Function		TestEGLError
// @Input			pszLocation		location in the program where the error took
//								place. ie: function name
// @Return		bool			true if no EGL error was detected
// @Description	Tests for an EGL error and prints it
//******************************************************************************/
//bool TestEGLError(HWND hWnd, char* pszLocation)
//{
//	/*
//		eglGetError returns the last error that has happened using egl,
//		not the status of the last called function. The user has to
//		check after every single egl call or at least once every frame.
//	*/
//	EGLint iErr = eglGetError();
//	if (iErr != EGL_SUCCESS)
//	{
//#ifndef NO_GDI
//		TCHAR pszStr[256];
//		_stprintf(pszStr, _T("%s failed (%d).\n"), pszLocation, iErr);
//		MessageBox(hWnd, pszStr, _T("Error"), MB_OK|MB_ICONEXCLAMATION);
//#endif
//		return false;
//	}
//
//	return true;
//}
//
///*!****************************************************************************
// @Function		WinMain
// @Input			hInstance		Application instance from OS
// @Input			hPrevInstance	Always NULL
// @Input			lpCmdLine		command line from OS
// @Input			nCmdShow		Specifies how the window is to be shown
// @Return		int				result code to OS
// @Description	Main function of the program
//******************************************************************************/
//int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, TCHAR *lpCmdLine, int nCmdShow)
//{
//	// Windows variables
//	HWND				hWnd	= 0;
//	HDC					hDC		= 0;
//
//	// EGL variables
//	EGLDisplay			eglDisplay	= 0;
//	EGLConfig			eglConfig	= 0;
//	EGLSurface			eglSurface	= 0;
//	EGLContext			eglContext	= 0;
//	EGLNativeWindowType	eglWindow	= 0;
//
//	// Matrix used for projection model view (PMVMatrix)
//	float pfIdentity[] =
//	{
//		1.0f,0.0f,0.0f,0.0f,
//		0.0f,1.0f,0.0f,0.0f,
//		0.0f,0.0f,1.0f,0.0f,
//		0.0f,0.0f,0.0f,1.0f
//	};
//	
//// Fragment and vertex shaders code
//	char* pszFragShader = "\
//		void main (void)\
//		{\
//			gl_FragColor = vec4(0.6, 1.0, 0.66 ,1.0);\
//		}";
//	char* pszVertShader = "\
//		attribute highp vec4	myVertex;\
//		uniform mediump mat4	myPMVMatrix;\
//		void main(void)\
//		{\
//			gl_Position = myPMVMatrix * myVertex;\
//		}";
//
//	/*
//		Step 0 - Create a EGLNativeWindowType that we can use for OpenGL ES output
//	*/
//#ifndef NO_GDI
//	// Register the windows class
//	WNDCLASS sWC;
//    sWC.style = CS_HREDRAW | CS_VREDRAW;
//	sWC.lpfnWndProc = WndProc;
//    sWC.cbClsExtra = 0;
//    sWC.cbWndExtra = 0;
//    sWC.hInstance = hInstance;
//    sWC.hIcon = 0;
//    sWC.hCursor = 0;
//    sWC.lpszMenuName = 0;
//	sWC.hbrBackground = (HBRUSH) GetStockObject(WHITE_BRUSH);
//    sWC.lpszClassName = WINDOW_CLASS;
//	unsigned int nWidth = WINDOW_WIDTH;
//	unsigned int nHeight = WINDOW_HEIGHT;
//
//	ATOM registerClass = RegisterClass(&sWC);
//	if (!registerClass)
//	{
//		MessageBox(0, _T("Failed to register the window class"), _T("Error"), MB_OK | MB_ICONEXCLAMATION);
//	}
//#if defined(UNDER_CE)
//	// Get the monitor dimensions
//	{
//		HMONITOR	hMonitor;
//		BOOL		bRet;
//		POINT		p;
//		MONITORINFO sMInfo;
//
//		p.x			= 0;
//		p.y			= 0;
//		hMonitor	= MonitorFromPoint(p, MONITOR_DEFAULTTOPRIMARY);
//		sMInfo.cbSize = sizeof(sMInfo);
//		bRet = GetMonitorInfo(hMonitor, &sMInfo);
//		if (!bRet)
//		{
//			MessageBox(0, _T("Failed to get monitor info"), _T("Error"), MB_OK|MB_ICONEXCLAMATION);
//			goto cleanup;
//		}
//
//		nWidth = sMInfo.rcMonitor.right - sMInfo.rcMonitor.left;
//		nHeight = sMInfo.rcMonitor.bottom - sMInfo.rcMonitor.top;
//	}
//#endif
//	// Create the eglWindow
//	RECT	sRect;
//	SetRect(&sRect, 0, 0, nWidth, nHeight);
//	AdjustWindowRectEx(&sRect, WS_CAPTION | WS_SYSMENU, false, 0);
//	hWnd = CreateWindow( WINDOW_CLASS, _T("HelloTriangle"), WS_VISIBLE | WS_SYSMENU,
//						 0, 0, nWidth, nHeight, NULL, NULL, hInstance, NULL);
//	eglWindow = hWnd;
//
//	// Get the associated device context
//	hDC = GetDC(hWnd);
//	if (!hDC)
//	{
//		MessageBox(0, _T("Failed to create the device context"), _T("Error"), MB_OK|MB_ICONEXCLAMATION);
//		goto cleanup;
//	}
//#endif
//	/*
//		Step 1 - Get the default display.
//		EGL uses the concept of a "display" which in most environments
//		corresponds to a single physical screen. Since we usually want
//		to draw to the main screen or only have a single screen to begin
//		with, we let EGL pick the default display.
//		Querying other displays is platform specific.
//	*/
//	eglDisplay = eglGetDisplay(hDC);
//
//    if(eglDisplay == EGL_NO_DISPLAY)
//         eglDisplay = eglGetDisplay((EGLNativeDisplayType) EGL_DEFAULT_DISPLAY);
//	/*
//		Step 2 - Initialize EGL.
//		EGL has to be initialized with the display obtained in the
//		previous step. We cannot use other EGL functions except
//		eglGetDisplay and eglGetError before eglInitialize has been
//		called.
//		If we're not interested in the EGL version number we can just
//		pass NULL for the second and third parameters.
//	*/
//	EGLint iMajorVersion, iMinorVersion;
//	if (!eglInitialize(eglDisplay, &iMajorVersion, &iMinorVersion))
//	{
//#ifndef NO_GDI
//		MessageBox(0, _T("eglInitialize() failed."), _T("Error"), MB_OK|MB_ICONEXCLAMATION);
//#endif
//		goto cleanup;
//	}
//
//	/*
//		Step 3 - Make OpenGL ES the current API.
//		EGL provides ways to set up OpenGL ES and OpenVG contexts
//		(and possibly other graphics APIs in the future), so we need
//		to specify the "current API".
//	*/
//	eglBindAPI(EGL_OPENGL_ES_API);
//	if (!TestEGLError(hWnd, "eglBindAPI"))
//	{
//		goto cleanup;
//	}
//
//	/*
//		Step 4 - Specify the required configuration attributes.
//		An EGL "configuration" describes the pixel format and type of
//		surfaces that can be used for drawing.
//		For now we just want to use the default Windows surface,
//		i.e. it will be visible on screen. The list
//		has to contain key/value pairs, terminated with EGL_NONE.
//	 */
//	const EGLint pi32ConfigAttribs[] =
//	{
//		EGL_LEVEL,				0,
//		EGL_SURFACE_TYPE,		EGL_WINDOW_BIT,
//		EGL_RENDERABLE_TYPE,	EGL_OPENGL_ES2_BIT,
//		EGL_NATIVE_RENDERABLE,	EGL_FALSE,
//		EGL_DEPTH_SIZE,			EGL_DONT_CARE,
//		EGL_NONE
//	};
//
//	/*
//		Step 5 - Find a config that matches all requirements.
//		eglChooseConfig provides a list of all available configurations
//		that meet or exceed the requirements given as the second
//		argument. In most cases we just want the first config that meets
//		all criteria, so we can limit the number of configs returned to 1.
//	*/
//	int iConfigs;
//	if (!eglChooseConfig(eglDisplay, pi32ConfigAttribs, &eglConfig, 1, &iConfigs) || (iConfigs != 1))
//	{
//#ifndef NO_GDI
//		MessageBox(0, _T("eglChooseConfig() failed."), _T("Error"), MB_OK|MB_ICONEXCLAMATION);
//#endif
//		goto cleanup;
//	}
//
//	/*
//		Step 6 - Create a surface to draw to.
//		Use the config picked in the previous step and the native window
//		handle when available to create a window surface. A window surface
//		is one that will be visible on screen inside the native display (or
//		fullscreen if there is no windowing system).
//		Pixmaps and pbuffers are surfaces which only exist in off-screen
//		memory.
//	*/
//	eglSurface = eglCreateWindowSurface(eglDisplay, eglConfig, eglWindow, NULL);
//
//    if(eglSurface == EGL_NO_SURFACE)
//    {
//        eglGetError(); // Clear error
//        eglSurface = eglCreateWindowSurface(eglDisplay, eglConfig, NULL, NULL);
//	}
//
//	if (!TestEGLError(hWnd, "eglCreateWindowSurface"))
//	{
//		goto cleanup;
//	}
//
//	/*
//		Step 7 - Create a context.
//		EGL has to create a context for OpenGL ES. Our OpenGL ES resources
//		like textures will only be valid inside this context
//		(or shared contexts)
//	*/
//	EGLint ai32ContextAttribs[] = { EGL_CONTEXT_CLIENT_VERSION, 2, EGL_NONE };
//	eglContext = eglCreateContext(eglDisplay, eglConfig, NULL, ai32ContextAttribs);
//	if (!TestEGLError(hWnd, "eglCreateContext"))
//	{
//		goto cleanup;
//	}
//
//	/*
//		Step 8 - Bind the context to the current thread and use our
//		window surface for drawing and reading.
//		Contexts are bound to a thread. This means you don't have to
//		worry about other threads and processes interfering with your
//		OpenGL ES application.
//		We need to specify a surface that will be the target of all
//		subsequent drawing operations, and one that will be the source
//		of read operations. They can be the same surface.
//	*/
//	eglMakeCurrent(eglDisplay, eglSurface, eglSurface, eglContext);
//	if (!TestEGLError(hWnd, "eglMakeCurrent"))
//	{
//		goto cleanup;
//	}
//
//	/*
//		Step 9 - Draw something with OpenGL ES.
//		At this point everything is initialized and we're ready to use
//		OpenGL ES to draw something on the screen.
//	*/
//
//	GLuint uiFragShader, uiVertShader;		/* Used to hold the fragment and vertex shader handles */
//	GLuint uiProgramObject;					/* Used to hold the program handle (made out of the two previous shaders */
//
//	// Create the fragment shader object
//	uiFragShader = glCreateShader(GL_FRAGMENT_SHADER);
//
//	// Load the source code into it
//	glShaderSource(uiFragShader, 1, (const char**)&pszFragShader, NULL);
//
//	// Compile the source code
//	glCompileShader(uiFragShader);
//
//	// Check if compilation succeeded
//	GLint bShaderCompiled;
//    glGetShaderiv(uiFragShader, GL_COMPILE_STATUS, &bShaderCompiled);
//
//	if (!bShaderCompiled)
//	{
//#ifndef NO_GDI
//		// An error happened, first retrieve the length of the log message
//		int i32InfoLogLength, i32CharsWritten;
//		glGetShaderiv(uiFragShader, GL_INFO_LOG_LENGTH, &i32InfoLogLength);
//
//		// Allocate enough space for the message and retrieve it
//		char* pszInfoLog = new char[i32InfoLogLength];
//        glGetShaderInfoLog(uiFragShader, i32InfoLogLength, &i32CharsWritten, pszInfoLog);
//
//		// Displays the error in a dialog box
//#ifndef UNDER_CE
//		MessageBox(hWnd, i32InfoLogLength ? pszInfoLog : _T(""), _T("Failed to compile fragment shader"), MB_OK|MB_ICONEXCLAMATION);
//#else
//		TCHAR* pszTInfoLog = new TCHAR[i32InfoLogLength];
//
//		for(int i = 0; i < i32InfoLogLength; ++i)
//			pszTInfoLog[i] = (TCHAR) pszInfoLog[i];
//
//		MessageBox(hWnd, i32InfoLogLength ? pszTInfoLog : _T(""), _T("Failed to compile fragment shader"), MB_OK|MB_ICONEXCLAMATION);
//		delete[] pszTInfoLog;
//#endif
//		delete[] pszInfoLog;
//#endif
//		goto cleanup;
//	}
//
//	// Loads the vertex shader in the same way
//	uiVertShader = glCreateShader(GL_VERTEX_SHADER);
//	glShaderSource(uiVertShader, 1, (const char**)&pszVertShader, NULL);
//	glCompileShader(uiVertShader);
//    glGetShaderiv(uiVertShader, GL_COMPILE_STATUS, &bShaderCompiled);
//	if (!bShaderCompiled)
//	{
//#ifndef NO_GDI
//		int i32InfoLogLength, i32CharsWritten;
//		glGetShaderiv(uiVertShader, GL_INFO_LOG_LENGTH, &i32InfoLogLength);
//		char* pszInfoLog = new char[i32InfoLogLength];
//        glGetShaderInfoLog(uiVertShader, i32InfoLogLength, &i32CharsWritten, pszInfoLog);
//#ifndef UNDER_CE
//		MessageBox(hWnd, i32InfoLogLength ? pszInfoLog : _T(""), _T("Failed to compile vertex shader"), MB_OK|MB_ICONEXCLAMATION);
//#else
//		TCHAR* pszTInfoLog = new TCHAR[i32InfoLogLength];
//
//		for(int i = 0; i < i32InfoLogLength; ++i)
//			pszTInfoLog[i] = (TCHAR) pszInfoLog[i];
//
//		MessageBox(hWnd, i32InfoLogLength ? pszTInfoLog : _T(""), _T("Failed to compile vertex shader"), MB_OK|MB_ICONEXCLAMATION);
//		delete[] pszTInfoLog;
//#endif
//		delete[] pszInfoLog;
//#endif
//		goto cleanup;
//	}
//
//	// Create the shader program
//    uiProgramObject = glCreateProgram();
//
//	// Attach the fragment and vertex shaders to it
//    glAttachShader(uiProgramObject, uiFragShader);
//    glAttachShader(uiProgramObject, uiVertShader);
//
//	// Bind the custom vertex attribute "myVertex" to location VERTEX_ARRAY
//    glBindAttribLocation(uiProgramObject, VERTEX_ARRAY, "myVertex");
//
//	// Link the program
//    glLinkProgram(uiProgramObject);
//
//	// Check if linking succeeded in the same way we checked for compilation success
//    GLint bLinked;
//    glGetProgramiv(uiProgramObject, GL_LINK_STATUS, &bLinked);
//	if (!bLinked)
//	{
//#ifndef NO_GDI
//		int i32InfoLogLength, i32CharsWritten;
//		glGetProgramiv(uiProgramObject, GL_INFO_LOG_LENGTH, &i32InfoLogLength);
//		char* pszInfoLog = new char[i32InfoLogLength];
//		glGetProgramInfoLog(uiProgramObject, i32InfoLogLength, &i32CharsWritten, pszInfoLog);
//
//#ifndef UNDER_CE
//		MessageBox(hWnd, i32InfoLogLength ? pszInfoLog : _T(""), _T("Failed to link program"), MB_OK|MB_ICONEXCLAMATION);
//#else
//		TCHAR* pszTInfoLog = new TCHAR[i32InfoLogLength];
//
//		for(int i = 0; i < i32InfoLogLength; ++i)
//			pszTInfoLog[i] = (TCHAR) pszInfoLog[i];
//
//		MessageBox(hWnd, i32InfoLogLength ? pszTInfoLog : _T(""), _T("Failed to link program"), MB_OK|MB_ICONEXCLAMATION);
//		delete[] pszTInfoLog;
//#endif
//		delete[] pszInfoLog;
//#endif
//		goto cleanup;
//	}
//
//	// Actually use the created program
//    glUseProgram(uiProgramObject);
//
//	// Sets the clear color.
//	// The colours are passed per channel (red,green,blue,alpha) as float values from 0.0 to 1.0
//	glClearColor(0.6f, 0.8f, 1.0f, 1.0f);
//
//	// We're going to draw a triangle to the screen so create a vertex buffer object for our triangle
//	GLuint	ui32Vbo; // Vertex buffer object handle
//	
//	// Interleaved vertex data
//	GLfloat afVertices[] = {	-0.4f,-0.4f,0.0f, // Position
//								0.4f ,-0.4f,0.0f,
//								0.0f ,0.6f ,0.0f};
//
//	// Generate the vertex buffer object (VBO)
//	glGenBuffers(1, &ui32Vbo);
//
//	// Bind the VBO so we can fill it with data
//	glBindBuffer(GL_ARRAY_BUFFER, ui32Vbo);
//
//	// Set the buffer's data
//	unsigned int uiSize = 3 * (sizeof(GLfloat) * 3); // Calc afVertices size (3 vertices * stride (3 GLfloats per vertex))
//	glBufferData(GL_ARRAY_BUFFER, uiSize, afVertices, GL_STATIC_DRAW);
//
//	// Draws a triangle for 800 frames
//	for(int i = 0; i < 800; ++i)
//	{
//		// Check if the message handler finished the demo
//		if (g_bDemoDone) break;
//
//		/*
//			Clears the color buffer.
//			glClear() can also be used to clear the depth or stencil buffer
//			(GL_DEPTH_BUFFER_BIT or GL_STENCIL_BUFFER_BIT)
//		*/
//		glClear(GL_COLOR_BUFFER_BIT);
//		if (!TestEGLError(hWnd, "glClear"))
//		{
//			goto cleanup;
//		}
//
//		/*
//			Bind the projection model view matrix (PMVMatrix) to
//			the associated uniform variable in the shader
//		*/
//
//		// First gets the location of that variable in the shader using its name
//		int i32Location = glGetUniformLocation(uiProgramObject, "myPMVMatrix");
//
//		// Then passes the matrix to that variable
//		glUniformMatrix4fv( i32Location, 1, GL_FALSE, pfIdentity);
//
//		/*
//			Enable the custom vertex attribute at index VERTEX_ARRAY.
//			We previously binded that index to the variable in our shader "vec4 MyVertex;"
//		*/
//		glEnableVertexAttribArray(VERTEX_ARRAY);
//
//		// Sets the vertex data to this attribute index
//		glVertexAttribPointer(VERTEX_ARRAY, 3, GL_FLOAT, GL_FALSE, 0, 0);
//
//		/*
//			Draws a non-indexed triangle array from the pointers previously given.
//			This function allows the use of other primitive types : triangle strips, lines, ...
//			For indexed geometry, use the function glDrawElements() with an index list.
//		*/
//		glDrawArrays(GL_TRIANGLES, 0, 3);
//		if (!TestEGLError(hWnd, "glDrawArrays"))
//		{
//			goto cleanup;
//		}
//
//		/*
//			Swap Buffers.
//			Brings to the native display the current render surface.
//		*/
//		eglSwapBuffers(eglDisplay, eglSurface);
//		if (!TestEGLError(hWnd, "eglSwapBuffers"))
//		{
//			goto cleanup;
//		}
//#ifndef NO_GDI
//		// Managing the window messages
//		MSG msg;
//		PeekMessage(&msg, hWnd, NULL, NULL, PM_REMOVE);
//		TranslateMessage(&msg);
//		DispatchMessage(&msg);
//#endif
//	}
//
//	// Frees the OpenGL handles for the program and the 2 shaders
//	glDeleteProgram(uiProgramObject);
//	glDeleteShader(uiFragShader);
//	glDeleteShader(uiVertShader);
//
//	// Delete the VBO as it is no longer needed
//	glDeleteBuffers(1, &ui32Vbo);
//
//	/*
//		Step 10 - Terminate OpenGL ES and destroy the window (if present).
//		eglTerminate takes care of destroying any context or surface created
//		with this display, so we don't need to call eglDestroySurface or
//		eglDestroyContext here.
//	*/
//cleanup:
//	eglMakeCurrent(eglDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);
//	eglTerminate(eglDisplay);
//
//	/*
//		Step 11 - Destroy the eglWindow.
//		Again, this is platform specific and delegated to a separate function.
//	*/
//#ifndef NO_GDI
//	// Release the device context
//	if (hDC) ReleaseDC(hWnd, hDC);
//
//	// Destroy the eglWindow
//	if (hWnd) DestroyWindow(hWnd);
//#endif
//	return 0;
//}
//
///******************************************************************************
// End of file (OGLES2HelloTriangle_Windows.cpp)
//******************************************************************************/
//
//
//
//
//
////#include <iostream>
////#include "SDL/SDL.h"
////#include "SDL\SDL_opengles2.h"
////
////static const int screen_width = 320;
////static const int screen_height = 480;
////
////static SDL_Window *win;
////static SDL_GLContext ctx;
////
////void sdl_error_die()
////{
////    std::clog << "Error: " << SDL_GetError() << std::endl;
////    exit(1);
////}
////
////int main(int argc, char **argv)
////{
////    if (SDL_Init(SDL_INIT_VIDEO) < 0)
////        sdl_error_die();
////
////	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 2);
////    win = SDL_CreateWindow(NULL, 0, 0, screen_width, screen_height,
////                           SDL_WINDOW_OPENGL | SDL_WINDOW_SHOWN);
////    if (!win)
////        sdl_error_die();
////
////    ctx = SDL_GL_CreateContext(win);
////    SDL_GL_SetSwapInterval(1);
////
////    bool running = true;
////    SDL_Event event;
////
////    while (running) {
////        while (SDL_PollEvent(&event)) {
////            if (event.type == SDL_QUIT)
////                running = false;
////        }
////
////        glClearColor(1.0, 0.0, 0.0, 1.0);
////        glClear(GL_COLOR_BUFFER_BIT);
////    }
////
////    SDL_GL_DeleteContext(ctx);
////    SDL_DestroyWindow(win);
////    SDL_Quit();
////	return 0;
////}
////
//////int main(int argc, char* argv[])
//////{
////////	SDL_Window* window; 
////////	SDL_Renderer* renderer; 
////////	bool quit = false;
////////
////////	// Initialize SDL. 
////////	if (SDL_Init(SDL_INIT_VIDEO) < 0) 
////////	return 1; 
////////
////////	// Create the window where we will draw. 
////////	window = SDL_CreateWindow("SDL_RenderClear", 
////////		SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 
////////		512, 512, 
////////		SDL_WINDOW_SHOWN | SDL_WINDOW_OPENGL); 
////////
////////	// We must call SDL_CreateRenderer in order for draw calls to affect this window. 
////////	renderer = SDL_CreateRenderer(window, -1, 0); 
////////
////////	// Select the color for drawing. It is set to red here. 
////////	SDL_SetRenderDrawColor(renderer, 0, 255, 0, 255); 
////////	
////////	SDL_Event e;
////////	while(!quit) { 
////////		while( SDL_PollEvent(&e) )
////////		{
////////        }
////////
////////		// Clear the entire screen to our selected color. 
////////		SDL_RenderClear(renderer); 
////////
////////		// Up until now everything was drawn behind the scenes. 
////////		// This will show the new, red contents of the window. 
////////		SDL_RenderPresent(renderer); 
////////
////////		// Give us time to see the window. 
////////		SDL_Delay(50); 
////////	} 
////////	
////////	// Always be sure to clean up 
////////SDL_Quit(); 
////////return 0; 
//////
//////	//SDL_Init(SDL_INIT_VIDEO); 
//////	//SDL_SetHint(SDL_HINT_FRAMEBUFFER_ACCELERATION, "opengles");
//////	//SDL_GL_LoadLibrary(NULL); 
//////
//////	//// Make a window... 
//////	//auto win = SDL_CreateWindow("My Application", 
//////	//SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 
//////	//640, 480, 
//////	//SDL_WINDOW_SHOWN | 
//////	//SDL_WINDOW_OPENGL); 
//////
//////	//// Create a GL context for that window... 
//////	//SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
//////	//SDL_GL_SetAttribute(SDL_GL_RED_SIZE,        8);
//////	//SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE,      8);
//////	//SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE,       8);
//////	//SDL_GL_SetAttribute(SDL_GL_ALPHA_SIZE,      8); 
//////	//SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE,      16);
//////	//SDL_GL_SetAttribute(SDL_GL_BUFFER_SIZE,     32);
////// //	SDL_GL_SetAttribute(SDL_GL_ACCUM_RED_SIZE,   8);
//////	//SDL_GL_SetAttribute(SDL_GL_ACCUM_GREEN_SIZE, 8);
//////	//SDL_GL_SetAttribute(SDL_GL_ACCUM_BLUE_SIZE,  8);
//////	//SDL_GL_SetAttribute(SDL_GL_ACCUM_ALPHA_SIZE, 8); 
//////	//SDL_GL_SetAttribute(SDL_GL_MULTISAMPLEBUFFERS, 1);
//////	//SDL_GL_SetAttribute(SDL_GL_MULTISAMPLESAMPLES, 2);
//////
//////	//// Make the major version 2 if you want GLES2 on Android. 
//////	//SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 1); 
//////	//SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 0); 
//////	//auto ctx = SDL_GL_CreateContext(win); 
//////	//SDL_GL_MakeCurrent(win, ctx); 
//////	
//////	// Now you can draw with OpenGL calls. 
//////
//////	// Use this instead of SDL 1.2's SDL_GL_SwapBuffers()... 
//////	if( SDL_Init(SDL_INIT_VIDEO) < 0 )
//////	{
//////        fprintf(stderr, "Couldn't initialize SDL: %s\n", SDL_GetError());
//////        return 1;
//////    }
//////
//////	auto screen = SDL_SetVideoMode(640, 480, 8, SDL_OPENGL);
//////    if( screen == NULL ) 
//////	{
//////        fprintf(stderr, "Couldn't initialize VideoMode: %s\n", SDL_GetError());
//////		return 1;
//////    }
//////
//////	glViewport(0, 0, 640, 480); 	
//////	glClear( GL_COLOR_BUFFER_BIT );
//////	glEnable(GL_TEXTURE_2D);
////// 
//////	bool done = false;
//////	SDL_Event e;
//////
//////    while( !done )
//////	{
//////        while( SDL_PollEvent(&e) )
//////		{
//////        }
//////
//////		glClearColor(1.0,0.0,0.0,0.0);
//////				
//////		//SDL_GL_SwapWindow(win); 
//////    }
//////	
//////	// At shutdown, you clean up... 
//////	//SDL_GL_MakeCurrent(NULL, NULL); 
//////	//SDL_GL_DeleteContext(ctx); 
//////	//SDL_DestroyWindow(win); 
//////
//////	// And finally, just like 1.2... 
//////	SDL_Quit(); 
//////
//////	std::cin.get();
//////	return 0;
//////}


/*esMatrixLoadIdentity(&projection);  
GLfloat size = zNear * tanf(fieldOfView / 2.0);   
esFrustum(&projection, -size, size, -size / ((float) height / (float) width), size / ((float) height / (float) width), zNear, zFar);   
  
esMatrixLoadIdentity(&modelView);  
  
glViewport(0, 0, width, height);*/  

//	
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//	
	//
	//glGenBuffers(1, &ui32Vbo); // Generate the vertex buffer object (VBO)
	//glBindBuffer(GL_ARRAY_BUFFER, ui32Vbo); 	// Bind the VBO so we can fill it with data
	//glVertexAttribPointer(VERTEX_ARRAY, 3, GL_FLOAT, GL_FALSE, 0, 0);

	//// Set the buffer's data
	//glBufferData(GL_ARRAY_BUFFER, sizeof(afVertices), afVertices, GL_STATIC_DRAW);
		
	//const GLfloat triColours[] = {  
	//	0.583f,  0.771f,  0.014f,
	//	0.609f,  0.115f,  0.436f,
	//	0.327f,  0.483f,  0.844f,
	//	0.822f,  0.569f,  0.201f,
	//	0.435f,  0.602f,  0.223f,
	//	0.310f,  0.747f,  0.185f,
	//	0.597f,  0.770f,  0.761f,
	//	0.559f,  0.436f,  0.730f,
	//	0.359f,  0.583f,  0.152f,
	//	0.483f,  0.596f,  0.789f,
	//	0.559f,  0.861f,  0.639f,
	//	0.195f,  0.548f,  0.859f,
	//	0.014f,  0.184f,  0.576f,
	//	0.771f,  0.328f,  0.970f,
	//	0.406f,  0.615f,  0.116f,
	//	0.676f,  0.977f,  0.133f,
	//	0.971f,  0.572f,  0.833f,
	//	0.140f,  0.616f,  0.489f,
	//	0.997f,  0.513f,  0.064f,
	//	0.945f,  0.719f,  0.592f,
	//	0.543f,  0.021f,  0.978f,
	//	0.279f,  0.317f,  0.505f,
	//	0.167f,  0.620f,  0.077f,
	//	0.347f,  0.857f,  0.137f,
	//	0.055f,  0.953f,  0.042f,
	//	0.714f,  0.505f,  0.345f,
	//	0.783f,  0.290f,  0.734f,
	//	0.722f,  0.645f,  0.174f,
	//	0.302f,  0.455f,  0.848f,
	//	0.225f,  0.587f,  0.040f,
	//	0.517f,  0.713f,  0.338f,
	//	0.053f,  0.959f,  0.120f,
	//	0.393f,  0.621f,  0.362f,
	//	0.673f,  0.211f,  0.457f,
	//	0.820f,  0.883f,  0.371f,
	//	0.982f,  0.099f,  0.879f
	//};	

	//glGenBuffers(1, &colorBuffer);
	//glBindBuffer(GL_ARRAY_BUFFER, colorBuffer);
	//glVertexAttribPointer(ATTRIB_COLOUR, 3, GL_FLOAT, GL_FALSE, 0, 0);
	//glBufferData(GL_ARRAY_BUFFER, sizeof(triColours), triColours, GL_STATIC_DRAW);
			
	//// Two UV coordinatesfor each vertex. They were created with Blender. You'll learn shortly how to do this yourself.
	//GLfloat g_uv_buffer_data[] = {
	//	0.000059f, 1.0f-0.000004f,
	//	0.000103f, 1.0f-0.336048f,
	//	0.335973f, 1.0f-0.335903f,
	//	1.000023f, 1.0f-0.000013f,
	//	0.667979f, 1.0f-0.335851f,
	//	0.999958f, 1.0f-0.336064f,
	//	0.667979f, 1.0f-0.335851f,
	//	0.336024f, 1.0f-0.671877f,
	//	0.667969f, 1.0f-0.671889f,
	//	1.000023f, 1.0f-0.000013f,
	//	0.668104f, 1.0f-0.000013f,
	//	0.667979f, 1.0f-0.335851f,
	//	0.000059f, 1.0f-0.000004f,
	//	0.335973f, 1.0f-0.335903f,
	//	0.336098f, 1.0f-0.000071f,
	//	0.667979f, 1.0f-0.335851f,
	//	0.335973f, 1.0f-0.335903f,
	//	0.336024f, 1.0f-0.671877f,
	//	1.000004f, 1.0f-0.671847f,
	//	0.999958f, 1.0f-0.336064f,
	//	0.667979f, 1.0f-0.335851f,
	//	0.668104f, 1.0f-0.000013f,
	//	0.335973f, 1.0f-0.335903f,
	//	0.667979f, 1.0f-0.335851f,
	//	0.335973f, 1.0f-0.335903f,
	//	0.668104f, 1.0f-0.000013f,
	//	0.336098f, 1.0f-0.000071f,
	//	0.000103f, 1.0f-0.336048f,
	//	0.000004f, 1.0f-0.671870f,
	//	0.336024f, 1.0f-0.671877f,
	//	0.000103f, 1.0f-0.336048f,
	//	0.336024f, 1.0f-0.671877f,
	//	0.335973f, 1.0f-0.335903f,
	//	0.667969f, 1.0f-0.671889f,
	//	1.000004f, 1.0f-0.671847f,
	//	0.667979f, 1.0f-0.335851f
	//};

	//glGenBuffers(1, &uvBuffer);
	//glBindBuffer(GL_ARRAY_BUFFER, uvBuffer);
	//glVertexAttribPointer(ATTRIB_UV, 2, GL_FLOAT, GL_FALSE, 0, 0);
	//glBufferData(GL_ARRAY_BUFFER, sizeof(g_uv_buffer_data), g_uv_buffer_data, GL_STATIC_DRAW);


	//GLfloat afVertices[] = {-0.4f,-0.4f,0.0f, // Pos
	//						 0.0f,0.0f ,	  // UVs
	//						 0.4f,-0.4f,0.0f,
	//						 1.0f,0.0f ,
	//						 0.0f,0.4f ,0.0f,
	//						 0.5f,1.0f};